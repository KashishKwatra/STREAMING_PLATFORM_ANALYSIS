
-------------------------- TASK-1 DATA CONTEXT---------------------------------

-- 1. Which is the most watched movie? 
SELECT TOP 1 C.content_id, title, SUM(user_duration) AS Watch_Time
FROM catalogue_data AS C
INNER JOIN consumption_data AS CO
ON C.content_id = CO.content_id
GROUP BY C.content_id, title
ORDER BY Watch_Time DESC


-- 2. Which movies has not been watched at all?
SELECT top 10 C.content_id, title, SUM(user_duration) AS Watch_Time
FROM catalogue_data AS C
LEFT JOIN consumption_data AS CO
ON C.content_id = CO.content_id
GROUP BY C.content_id, title
ORDER BY Watch_Time ASC  
             --there are no movies with 0 watch time but there are with least watch time--


-- 3. Calculate the % of total revenue generated by the different plan types.
SELECT plan_type, SUM(amount_paid) AS Revenue,
SUM(Amount_paid) / (SELECT SUM(amount_paid) FROM subscription_data
						WHERE plan_type IS NOT NULL)*100 AS [Revenue %]
FROM subscription_data
WHERE plan_type IS NOT NULL
GROUP BY plan_type


-- 4. Which movies are helping us aquire most number of users?
SELECT TOP 10 T1.content_id, title,SUM(content_duration) AS Watch_Time
FROM catalogue_data AS T1
INNER JOIN consumption_data AS T2
ON T1.content_id = T2.content_id
INNER JOIN rating_data AS T3
ON T3.userid = T2.userid
           AND
T3.usersessionid = T2.usersessionid
WHERE T3.rating IN ('AWESOME' , 'GOOD')
GROUP BY T1.content_id, title
ORDER BY Watch_Time DESC


-- 5. All content which has been live for last 6 months.
SELECT title, date_added
FROM catalogue_data
WHERE status = 'LIVE'
          AND
 date_added >= (SELECT DATEADD(MONTH, -6, MAX(date_added)) FROM catalogue_data)



 ---------------------------------TASK-2 SUBSCRIPTION ANALYSIS----------------------------------

-- 1. Total Subscriptions
SELECT COUNT(subscription_key) AS Total_subs
FROM subscription_data

-- 2. Total Revenue from Subscriptions
SELECT SUM(amount_paid) AS Revenue
FROM subscription_data

-- 3. Average Revenue per Subscription
SELECT plan_type, AVG(amount_paid) AS Avy_Revenue
FROM subscription_data
GROUP BY plan_type

-- 4. Subscriptions percentage by plan type
SELECT plan_type, 
COUNT(subscription_key) / CAST( (SELECT COUNT(subscription_key) 
                          FROM subscription_data) AS FLOAT)*100 AS [Subs%]
FROM subscription_data
WHERE plan_type IS NOT NULL
GROUP BY plan_type

-- 5. Subscriptions percentage by plan duration
SELECT subscription_length, 
COUNT(subscription_key) / CAST( (SELECT COUNT(subscription_key)
                          FROM subscription_data) AS FLOAT )*100 AS [Subs%]
FROM subscription_data
GROUP BY subscription_length
ORDER BY [Subs%] DESC

--6. Calculate the total revenue generated per month.
SELECT MONTH(subscription_start_date) AS Months, SUM(amount_paid) AS Revenue
FROM subscription_data
GROUP BY MONTH(subscription_start_date)

-- 7. Monthly New Subscriptions
SELECT MONTH(subscription_created_date) AS Months, COUNT(subscription_key) AS Subs
FROM subscription_data
GROUP BY MONTH(subscription_created_date) 
ORDER BY Months

-- 8. Understanding when users are purchasing
SELECT TOP 1 MONTH(subscription_created_date) AS Months, COUNT(subscription_key) AS Subs
FROM subscription_data
GROUP BY MONTH(subscription_created_date) 
ORDER BY Subs DESC  


---------------------------------- TASK-3 Content--------------------------
-- 1. Total content
SELECT COUNT(title) AS TOTAL_CONTENT
FROM catalogue_data

-- 2. Total content split by paid & free
SELECT accesslevel,
COUNT(title) / CAST((SELECT COUNT(title) FROM catalogue_data)AS float)*100 AS Total_Content
FROM catalogue_data
GROUP BY accesslevel


-- 3. Total content split by status
SELECT status,
COUNT(title) / CAST((SELECT COUNT(title) FROM catalogue_data)AS FLOAT)*100 AS Total_Content
FROM catalogue_data
GROUP BY status
                      --OR--
SELECT status,
COUNT(title) AS Total_Content
FROM catalogue_data
GROUP BY status


-- 4. Month of month content added to the platform.
-- Perfom MoM analysis as well---> trend
SELECT Months, Content_Added, Content_Added - Prev_Content AS MoM
FROM (
     SELECT MONTH(date_added) AS Months, COUNT(title) AS Content_Added,
     LAG(COUNT(title), 1) OVER (ORDER BY MONTH(date_added)) AS Prev_Content
     FROM catalogue_data
     GROUP BY MONTH(date_added)
) AS X


-- 5. Compare MoM count of Indian content added to the platform vs other content added
SELECT MONTH(date_added) AS MONTHS, Labels, COUNT(title) AS CONTENTS
FROM (
	SELECT *,
	CASE
		WHEN country LIKE '%INDIA%'
				THEN 'India'
		ELSE  'Others'
	END as Labels
	FROM catalogue_data 
) AS X
GROUP BY MONTH(date_added) , Labels
ORDER BY MONTHS

-- 2ND METHOD:
SELECT MONTHS, SUM(INDIA) AS INDIA, SUM(OTHERS) AS OTHERS
FROM (
	SELECT MONTH(date_added) AS MONTHS, 
	CASE 
		WHEN country LIKE '%INDIA%'
				THEN COUNT(title)
		ELSE 0
	END AS INDIA,
	CASE 
			WHEN country NOT LIKE '%INDIA%'
				THEN COUNT(TITLE)
			ELSE 0
	END AS OTHERS
	FROM catalogue_data
	GROUP BY MONTH(date_added), country
) AS X
GROUP BY MONTHS 

-- 6. Which content is pulling in the most number of users?
SELECT TOP 5 T1.content_id, title, SUM(user_duration) AS Watch_Time
FROM catalogue_data AS T1
INNER JOIN consumption_data AS T2
ON T1.content_id = T2.content_id
INNER JOIN rating_data AS T3
ON T3.userid = T2.userid
       AND
T2.usersessionid = T3.usersessionid
WHERE T3.rating	IN ('AWESOME', 'GOOD')
GROUP BY T1.content_id, title
ORDER BY SUM(user_duration) DESC

-- 7. Different genres of content with the content count.
SELECT listed_in, COUNT(TITLE) AS Content
FROM catalogue_data
GROUP BY listed_in
ORDER BY Content DESC


---------------------------- TASK-4 Rating Analysis--------------------------

-- 1. Different rating categories given by the users	
SELECT rating
FROM rating_data

-- 2. Total Content whose rating is not given by the users			
SELECT title
FROM rating_data AS R
INNER JOIN consumption_data AS C
ON R.userid = C.userid
        AND
R.usersessionid = C.usersessionid
INNER JOIN catalogue_data AS CA
ON CA.content_id = C.content_id
WHERE R.rating = 'NOT_RATED'
EXCEPT
SELECT title
FROM rating_data AS R
INNER JOIN consumption_data AS C
ON R.userid = C.userid
        AND
R.usersessionid = C.usersessionid
INNER JOIN catalogue_data AS CA
ON CA.content_id = C.content_id
WHERE R.rating <> 'NOT_RATED'

--3. Contents with the highest rating		
SELECT title, COUNT(R.feedback_id) AS Rating_Count
FROM rating_data AS R
INNER JOIN consumption_data AS C
ON R.userid = C.userid
        AND
R.usersessionid = C.usersessionid
INNER JOIN catalogue_data AS CA
ON CA.content_id = C.content_id
WHERE R.rating IN ('AWESOME', 'GOOD')
GROUP BY title
ORDER BY Rating_Count DESC

--4. Which content will be removed in the coming time?
SELECT title, SUM(user_duration) AS Watch_Time, COUNT(C.userid) AS Watch_Count
FROM rating_data AS R
INNER JOIN consumption_data AS C
ON R.userid = C.userid
        AND
R.usersessionid = C.usersessionid
INNER JOIN catalogue_data AS CA
ON CA.content_id = C.content_id
WHERE R.rating IN ('TERRIBLE', 'DISMISSED', 'BAD')
GROUP BY title
ORDER BY Watch_Count DESC, Watch_Time ASC

--5. Content from horror categoy		
SELECT DISTINCT title
FROM catalogue_data
WHERE listed_in LIKE '%HORROR%'

--6. Top rated content from India	
SELECT TOP 10 title, COUNT(R.rating) AS Ratings
FROM rating_data AS R
INNER JOIN consumption_data AS C
ON R.userid = C.userid
        AND
R.usersessionid = C.usersessionid
INNER JOIN catalogue_data AS CA
ON CA.content_id = C.content_id
WHERE country LIKE '%INDIA%'
          AND
R.rating IN ('AWESOME', 'GOOD')
GROUP BY title
ORDER BY Ratings DESC


